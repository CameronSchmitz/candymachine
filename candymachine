//*******************************************************************
//
//   File: Animate.java          Assignment No.: 4
//
//   Author: Jason Huishen Lu      Email: <huishen.lu@yale.edu>
//
//   Class: CS 112
//
//   Time spent on this problem: 5 hours
//   --------------------
//      Animate 2 objects based on user entered parameters
//
//*******************************************************************
import java.util.Scanner;
import java.awt.Color;

public class CarRace {
    public static void main(String[] args) {
        //engage scanner to take user inputs
        Scanner console = new Scanner(System.in);

        //get width and height of canvas
        System.out.println("Enter the width and height of canvas");
        int WIDTH = console.nextInt(), HEIGHT = console.nextInt();

        //get ix1, iy1, v1, ANGLE_DEGREES_1
        System.out.println("Enter the x starting position, y starting position, initial speed, and angle of the figure");
        int ix1 = console.nextInt(), iy1 = console.nextInt(), v1 = console.nextInt(), ANGLE_DEGREES_1 = console.nextInt();

        //get imagine file name
        System.out.println("Enter the file name of an imagine file");
        String s1 = console.next();

        //get ix2, iy2, v2, ANGLE_DEGREES_2
        System.out.println("Enter the x starting position, y starting  position, inital peed, and angle of the imagine file.");
        int ix2 = console.nextInt(), iy2 = console.nextInt(), v2 = console.nextInt(), ANGLE_DEGREES_2 = console.nextInt();

        //get audio file name
        System.out.println("Enter the name of the audio file");
        String s2 = console.next();

        //get count down time name
        System.out.println("Enter the count down time.");
        int n = console.nextInt();

        //set canvas
        setCanvasScale(WIDTH, HEIGHT);

        // First, a count down scene
        sceneStart(ix1, ix2, iy1, iy2, n, WIDTH, HEIGHT, s1);

        // Real launch
        sceneRace(ix1, ix2, iy1, iy2, v1, v2, ANGLE_DEGREES_1, ANGLE_DEGREES_2, s1, s2);

    } // end of main

    //controls count down scene
    public static void sceneStart(int ix1, int ix2, int iy1, int iy2, int n, int WIDTH, int HEIGHT, String s1) {

        //loop which control the count down scene
        for (int t = n; t >= 0; t--) {

            drawBorder(WIDTH, HEIGHT);

            // Object 1 at initial position
            drawBus(ix1, iy1, 50);

            // Object 2 at initial position
            StdDraw.picture(ix2, iy2, s1);

            // input/calculate parameters needed for draw clock and draw clock
            double cx = WIDTH / 2, cy = HEIGHT / 2, r = Math.min (HEIGHT, WIDTH) / 4;
            drawClock(cx, cy, r, n, t);

            // show double buffer and then sleep 1 sec
            StdDraw.show(1000);

            // When we did not have clear, the numbers
            // overlap on each other
            StdDraw.clear();
        }
    }

    //control actual launch
    public static void sceneRace(int ix1, int ix2, int iy1, int iy2, int v1, int v2,
                                 int ANGLE_DEGREES_1, int ANGLE_DEGREES_2, String s1, String s2) {
        //initiate audio
        StdAudio.loop(s2);

        final int FRAME_TIME = 50; // set frame to 50 ms

        // Simulate time from 0 to 10 sec.
        for (double t = 0; t < 10; t += FRAME_TIME / 1000.0) {
            // Compute figure's position
            double ANGLE_RADIANS_1 = Math.toRadians(ANGLE_DEGREES_1);
            double x1 = posx(ix1, v1, t, ANGLE_RADIANS_1); // animate change in x
            double y1 = posy(iy1, v1, t, ANGLE_RADIANS_1);  // animate change in y

            // Compute imagine's position
            double ANGLE_RADIANS_2 = Math.toRadians(ANGLE_DEGREES_2);
            double x2 = posx(ix2, v2, t, ANGLE_RADIANS_2); // animate change in x
            double y2 = posy(iy2, v2, t, ANGLE_RADIANS_2); // animate change in y

            //draws figure
            drawBus(x1, y1, 50);

            //draws image file
            StdDraw.picture(x2, y2, s1);
            
            // copy to display, and sleep for FRAME_TIME ms
            StdDraw.show(FRAME_TIME);

            //prevent overlap
            StdDraw.clear();
        }
    }// end scene race

    // Compute position from initial position initP, initial speed initV, t, and ANGLE_RADIANS for x values
    public static double posx(double initP, double initV, double t, double ANGLE_RADIANS) {
        double COS_RADIANS = Math.cos(ANGLE_RADIANS); //convert angles to radians
        return initP + COS_RADIANS * initV * t; //return delta x
    }

    // Compute position from initial position initP, initial speed initV, t, and ANGLE_RADIANS for y values
    public static double posy(double initP, double initV, double t, double ANGLE_RADIANS) {
        double SIN_RADIANS = Math.sin(ANGLE_RADIANS); //convert angles to radians
        return initP + SIN_RADIANS * initV * t; //return delta y
    }

    // Utility method to use Canvas size as scale
    public static void setCanvasScale(int WIDTH, int HEIGHT) {
        // Change from the default
        StdDraw.setCanvasSize(WIDTH, HEIGHT);

        // Change scale from the default of [0 - 1.0].
        StdDraw.setXscale(0, WIDTH);
        StdDraw.setYscale(0, HEIGHT);
    }

    //draws border
    public static void drawBorder(int WIDTH, int HEIGHT) {
        StdDraw.setPenColor(Color.BLACK);
        StdDraw.rectangle(WIDTH / 2, HEIGHT / 2, WIDTH / 2, HEIGHT / 2);
    }

    //draws clock with cs, cy, r, n, and t
    public static void drawClock(double cx, double cy, double r, int n, int t) {
        StdDraw.setPenColor(Color.DARK_GRAY);
        StdDraw.circle(cx, cy, r);//draws circle
        double ANGLE_DEGREES =  (360 / n) * (-1 * t + n); //divides the circle to get an angle of the clock based on t
        double ANGLE_RADIANS = Math.toRadians(ANGLE_DEGREES - 90); //convert  to radians
        double SIN_RADIANS = Math.sin(ANGLE_RADIANS); //calculate sin
        double COS_RADIANS = Math.cos(ANGLE_RADIANS); //calculate cos
        StdDraw.setPenColor(Color.ORANGE);
        StdDraw.line(cx, cy, cx + r * COS_RADIANS, cy + -1 * r * SIN_RADIANS); //draws hand of clock
        StdDraw.text(cx + (r + 10) * COS_RADIANS, cy + -1 * (r + 10) * SIN_RADIANS, "" + t); //draws text at the end of hand
    } //end draw clock

    //draws bus
    public static void drawBus(double x1, double y1, double BUS_SIZE) {
        final double BUS_WIDTH = 1.00, BUS_RADIUS = 0.10;
        final double BUS_MARGIN = 0.15, WINDOW_WIDTH = 0.30;

        // draws body
        StdDraw.setPenColor(Color.YELLOW);
        StdDraw.filledRectangle(x1 + BUS_SIZE / 2,
                y1,
                BUS_SIZE / 2,
                BUS_SIZE / 3);

        // draws window
        StdDraw.setPenColor(Color.BLUE);
        StdDraw.filledRectangle(x1 + BUS_SIZE * (BUS_WIDTH - WINDOW_WIDTH / 2),
                y1 + BUS_SIZE  * 0.1,
                BUS_SIZE / 4,
                BUS_SIZE / 6);

        // draws wheels
        StdDraw.setPenColor(Color.BLACK);
        StdDraw.filledCircle(x1 + BUS_SIZE * (BUS_MARGIN + BUS_RADIUS),
                y1 - BUS_SIZE / 3,
                BUS_SIZE / 6);

        StdDraw.filledCircle(x1 + BUS_SIZE * (BUS_WIDTH - BUS_MARGIN -
                        BUS_RADIUS),
                y1 - BUS_SIZE / 3,
                BUS_SIZE / 6);
    } //end draw bus
} // end program
